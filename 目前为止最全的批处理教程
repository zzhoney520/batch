目前为止最全的批处理教程

　　第一章 批处理基础

　　第一节 常用批处理内部命令简介

　　1、REM 和 ::

　　2、ECHO 和 @

　　3、PAUSE

　　4、ERRORLEVEL

　　5、TITLE

　　6、COLOR

　　7、mode 配置系统设备

　　8、GOTO 和 :

　　9、FIND

　　10、START

　　11、assoc 和 ftype

　　12、pushd 和 popd

　　13、CALL

　　14、shift

　　15、IF

　　16、setlocal 与 变量延迟(ENABLEDELAYEDEXPANSION / DISABLEDELAYEDEXPANSION

　　启动或停用延缓环境变量扩展名。)

　　17、ATTRIB显示或更改文件属性

　　第二节 常用特殊符号

　　1、@命令行回显屏蔽符

　　2、%批处理变量引导符

　　3、> 重定向符

　　4、>>重定向符

　　5、<、>、<& 重定向符

　　6、|命令管道符

　　7、^转义字符

　　8、组合命令

　　9、& 组合命令

　　10、||组合命令

　　11、\"\"字符串界定符

　　12、, 逗号

　　13、; 分号

　　14、() 括号

　　15、! 感叹号

　　第二章 FOR命令详解

　　一、基本格式

　　二、参数 /d仅为目录

　　三、参数 /R递归（文件名）

　　四、参数 /L迭代数值范围

　　五、参数 /F迭代及文件解析

　　第三章 FOR命令中的变量

　　一、 ~I- 删除任何引号(\")，扩展 %I

　　二、 %~fI- 将 %I 扩展到一个完全合格的路径名

　　三、 %~dI- 仅将 %I 扩展到一个驱动器号

　　四、 %~pI- 仅将 %I 扩展到一个路径

　　五、 %~nI- 仅将 %I 扩展到一个文件名

　　六、 %~xI- 仅将 %I 扩展到一个文件扩展名

　　七、 %~sI- 扩展的路径只含有短名

　　八、 %~aI- 将 %I 扩展到文件的文件属性

　　九、 %~tI- 将 %I 扩展到文件的日期/时间

　　十、 %~zI- 将 %I 扩展到文件的大小

　　十一、 %~$PATH:I

　　第四章 批处理中的变量

　　一、系统变量

　　二、自定义变量

　　第五章 set命令详解

　　一、用set命令设置自定义变量

　　二、用set命令进行简单计算

　　三、用set命令进行字符串处理

　　1、字符串替换

　　2、字符串截取

　　第六章 if命令讲解

　　第一种用法：IF [NOT] ERRORLEVEL number command

　　第二种用法：IF [NOT] string1==string2 command

　　第三种用法：IF [NOT] EXIST filename command

　　第四种用法：IF增强的用法

　　第七章 DOS编程高级技巧

　　一、界面设计

　　二、if…else…条件语句

　　三、循环语句

　　四、子程序

　　五、用ftp命令实现自动下载

　　六、用7-ZIP实现命令行压缩和解压功能

　　七、调用VBScript程序

　　八、将批处理转化为可执行文件

　　九、时间延迟

　　1、利用ping命令延时

　　2、利用for命令延时

　　3、利用vbs延迟函数，精确度毫秒，误差1000毫秒内

　　4、仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内

　　十、模拟进度条

　　十一、特殊字符的输入及应用

　　十二、随机数（%random%）的应用技巧

　　十三、变量嵌套 与 命令嵌套

　　1、更正了所有的错别字，适当排版，增加条理性。

　　2、运行改善所有例子，并纠正了一些语法错误。

　　3、补充了一些不完全的地方。

　　4、第一章参考了网上许多教程汇编而成。

　　5、20080229补充了变量延迟的问题。

　　6、20080305修改了参数usebackq的说明

　　7、20080310增加了特殊字符的输入及应用

　　8、20080311修改了子程序部分

　　9、20080313修改了echo说明，归纳了9个应用方法

　　10、20080320增加任意时间延迟方法

　　11、20080321增加了set计算中十进制与八进制混淆问题的说明

　　12、20080325修正dos数值计算范围：-2147483648至2147483647，即-2^31～2^31-1

　　13、20080326增加随机数的应用

　　14、20080327修改了“if增强用法”中的defined语句说明

　　15、20080402增加变量嵌套与命令嵌套，重要技巧之一。

　　======================================================================

　　第一章 批处理基础

　　第一节 常用批处理内部命令简介

　　批处理定义：顾名思义，批处理文件是将一系列命令按一定的顺序集合为一个可执行的文本文件，其扩展名为BAT或者CMD。这些命令统称批处理命令。

　　小知识：可以在键盘上按下Ctrl+C组合键来强行终止一个批处理的执行过程。

　　了解了大概意思后,我们正式开始学习.先看一个简单的例子!

　　@echo off

　　echo \"欢迎来到非常BAT!\"

　　pause

　　把上面的3条命令保存为文件test.bat或者test.cmd然后执行,

　　他就会在屏幕上显示以下二行话:

　　欢迎来到非常BAT!

　　请按任意键继续. . .

　　这就是一个简单批处理文件了，这个批处理文件一共就用了2条命令 \"echo\" 和\"pause\" 还有一个特殊符号\"@\"

　　从上面这个简单的批处理中,我们可以发现其实批处理就是运用一些含有特殊意义的符号和一些完成指定功能的命令组合而成,那么在批处理中有多少这样的特殊符号和功能命令呢？我们现在就来仔细了解一下一些最常用的!

　　(以下内容来源网络,请各位仔细阅读,好进入下节的实例说明)

　　======================================================

　　批处理的常见命令（未列举的命令还比较多，请查阅帮助信息）

　　1、REM 和 ::

　　2、ECHO 和 @

　　3、PAUSE

　　4、ERRORLEVEL

　　5、TITLE

　　6、COLOR

　　7、mode 配置系统设备

　　8、GOTO 和 :

　　9、FIND

　　10、START

　　11、assoc 和 ftype

　　12、pushd 和 popd

　　13、CALL

　　14、shift

　　15、IF

　　16、setlocal 与 变量延迟

　　17、ATTRIB显示或更改文件属性

　　介绍命令

　　1、REM 和 ::

　　REM为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。

　　其次, :: 也可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意：

　　第一, 任何以冒号:开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。

　　有效标号：冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别。

　　无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号，可以起到注释作用，所以 :: 常被用作注释符号，其实 :+ 也可起注释作用。

　　第二, 与rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中。

　　行内注释格式：%注释内容%（不常用，慎用）

　　2、ECHO 和 @

　　@字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态。

　　echo命令的作用列举如下：

　　（1）打开回显或关闭回显功能

　　格式:echo [{ on|off }]

　　如果想关闭“ECHO OFF”命令行自身的显示，则需要在该命令行前加上“@”。

　　（2）显示当前ECHO设置状态

　　格式:echo

　　（3）输出提示信息 

　　格式：ECHO 信息内容

　　上述是ECHO命令常见的三种用法，也是大家熟悉和会用的，但作为DOS命令淘金者你还应该知道下面的技巧：

　　（4）关闭DOS命令提示符 

　　在DOS提示符状态下键入ECHO OFF，能够关闭DOS提示符的显示使屏幕只留下光标，直至键入ECHO ON，提示符才会重新出现。

　　（5）输出空行，即相当于输入一个回车 

　　格式：ECHO．

　　值得注意的是命令行中的“．”要紧跟在ECHO后面中间不能有空格，否则“．”将被当作提示信息输出到屏幕。另外“．”可以用，：；”／[\\]＋等任一符号替代。

　　命令ECHO．输出的回车，经DOS管道转向可以作为其它命令的输入，比如echo.|time即相当于在TIME命令执行后给出一个回车。所以执行时系统会在显示当前时间后，自动返回到DOS提示符状态

　　（6）答复命令中的提问 

　　格式：ECHO 答复语|命令文件名

　　上述格式可以用于简化一些需要人机对话的命令（如：CHKDSK／F；FORMAT Drive:；del *.*）的操作，它是通过DOS管道命令把ECHO命令输出的预置答复语作为人机对话命令的输入。下面的例子就相当于在调用的命令出现人机对话时输入“Y”回车：

　　C:>ECHO Y|CHKDSK/F

　　C:>ECHO Y|DEL A :*.*

　　（7）建立新文件或增加文件内容 

　　格式：ECHO 文件内容>文件名

　　ECHO 文件内容>>文件名

　　例如：

　　C:>ECHO @ECHO OFF>AUTOEXEC.BAT建立自动批处理文件

　　C:>ECHO C:\\CPAV\\BOOTSAFE>>AUTOEXEC.BAT向自动批处理文件中追加内容

　　C:>TYPE AUTOEXEC.BAT显示该自动批处理文件

　　@ECHO OFF

　　C:\\CPAV\\BOOTSAFE

　　（8）向打印机输出打印内容或打印控制码 

　　格式：ECHO 打印机控制码>RN

　　ECHO 打印内容>RN

　　下面的例子是向M－1724打印机输入打印控制码。＜Alt＞156是按住Alt键在小键盘键入156，类似情况依此类推：

　　C:>ECHO +156+42+116>RN（输入下划线命令FS＊t）

　　C:>ECHO [url=mailto:+155@]+155@>RN[/url]（输入初始化命令ESC@）

　　C:>ECHO.>RN（换行）

　　（9）使喇叭鸣响 

　　C:>ECHO ^G

　　“^G”是在dos窗口中用Ctrl＋G或Alt＋007输入，输入多个^G可以产生多声鸣响。使用方法是直接将其加入批处理文件中或做成批处理文件调用。

　　这里的“^G”属于特殊符号的使用，请看本文后面的章节

　　3、PAUSE

　　PAUSE，玩游戏的人都知道，暂停的意思

　　在这里就是停止系统命令的执行并显示下面的内容。

　　例：

　　PAUSE

　　运行显示：

　　请按任意键继续. . .

　　要显示其他提示语，可以这样用：

　　Echo 其他提示语 pause > nul

　　4、errorlevel

　　程序返回码

　　echo %errorlevel%

　　每个命令运行结束，可以用这个命令行格式查看返回码

　　用于判断刚才的命令是否执行成功

　　默认值为0，一般命令执行出错会设 errorlevel 为1

　　5、title

　　设置cmd窗口的标题

　　title 新标题#可以看到cmd窗口的标题栏变了

　　6、COLOR

　　设置默认的控制台前景和背景颜色。

　　COLOR [attr]

　　attr指定控制台输出的颜色属性

　　颜色属性由两个十六进制数字指定 -- 第一个为背景，第二个则为

　　前景。每个数字可以为以下任何值之一:

　　0 = 黑色 8 = 灰色

　　1 = 蓝色 9 = 淡蓝色

　　2 = 绿色 A = 淡绿色

　　3 = 湖蓝色 B = 淡浅绿色

　　4 = 红色 C = 淡红色

　　5 = 紫色 D = 淡紫色

　　6 = ** E = 淡**

　　7 = 白色 F = 亮白色

　　如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时

　　的颜色。这个值来自当前控制台窗口、/T 开关或

　　DefaultColor 注册表值。

　　如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令

　　会将 ERRORLEVEL 设置为 1。

　　例如: \"COLOR fc\" 在亮白色上产生亮红色

　　7、mode 配置系统设备

　　配置系统设备。

　　串行口:　　　 MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]

　　[to=on|off] [xon=on|off] [odsr=on|off]

　　[octs=on|off] [dtr=on|off|hs]

　　[rts=on|off|hs|tg] [idsr=on|off]

　　设备状态: MODE [device] [/STATUS]

　　打印重定向:　　 MODE LPTn[:]=COMm[:]

　　选定代码页:　　 MODE CON[:] CP SELECT=yyy

　　代码页状态:　　 MODE CON[:] CP [/STATUS]

　　显示模式:　　 MODE CON[:] [COLS=c] [LINES=n]

　　击键率:　 MODE CON[:] [RATE=r DELAY=d]

　　例：

　　mode con cols=113 lines=15 color 9f

　　此命令设置DOS窗口大小：15行，113列

　　8、GOTO 和 :

　　GOTO会点编程的朋友就会知道这是跳转的意思。

　　在批处理中允许以“:XXX”来构建一个标号，然后用GOTO XXX跳转到标号:XXX处，然后执行标号后的命令。

　　例：

　　if {%1}=={} goto noparms

　　if \"%2\"==\"\" goto noparms

　　标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号（:）来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。

　　例：

　　@echo off

　　:start

　　set /a var+=1

　　echo %var%

　　if %var% leq 3 GOTO start

　　pause

　　运行显示：

　　1

　　2

　　3

　　4

　　9、find

　　在文件中搜索字符串。

　　FIND [/V] [/C] [/N] [/OFF[LINE]] \"string\" [[drive:][path]filename[ ...]]

　　/V显示所有未包含指定字符串的行。

　　/C仅显示包含字符串的行数。

　　/N显示行号。

　　/I搜索字符串时忽略大小写。

　　/OFF[LINE] 不要跳过具有脱机属性集的文件。

　　\"string\"指定要搜索的文字串，

　　[drive:][path]filename

　　指定要搜索的文件。

　　如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。

　　Find常和type命令结合使用

　　Type [drive:][path]filename | find \"string\" [>tmpfile] #挑选包含string的行

　　Type [drive:][path]filename | find /v \"string\" #剔除文件中包含string的行

　　Type [drive:][path]filename | find /c #显示文件行数 

　　以上用法将去除find命令自带的提示语（文件名提示）

　　例：

　　@echo off

　　echo 111 >test.txt

　　echo 222 >>test.txt

　　find \"111\" test.txt

　　del test.txt

　　pause

　　运行显示如下：

　　---------- TEST.TXT

　　111

　　请按任意键继续. . .

　　例：

　　@echo off

　　echo 111 >test.txt

　　echo 222 >>test.txt

　　type test.txt|find \"111\" 

　　del test.txt

　　pause

　　运行显示如下：

　　111

　　请按任意键继续. . .

　　10、start 命令

　　批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令

　　例：start explorer d:\\

　　调用图形界面打开D盘

　　11、assoc 和 ftype

　　文件关联

　　assoc 设置#39;文件扩展名'关联，关联到'文件类型'

　　ftype 设置#39;文件类型'关联，关联到'执行程序和参数'

　　当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开

　　而是先判断.txt属于 txtfile #39;文件类型'

　　再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\\system32\\NOTEPAD.EXE %1

　　可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联

　　assoc #显示所有#39;文件扩展名'关联

　　assoc .txt#显示.txt代表的#39;文件类型'，结果显示 .txt=txtfile

　　assoc .doc#显示.doc代表的#39;文件类型'，结果显示 .doc=Word.Document.8

　　assoc .exe#显示.exe代表的#39;文件类型'，结果显示 .exe=exefile

　　ftype #显示所有#39;文件类型'关联

　　ftype exefile #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %* 

　　assoc .txt=Word.Document.8

　　设置.txt为word类型的文档，可以看到.txt文件的图标都变了

　　assoc .txt=txtfile

　　恢复.txt的正确关联

　　ftype exefile=\"%1\" %*

　　恢复 exefile 的正确关联

　　如果该关联已经被破坏，可以运行 command.com ，再输入这条命令

　　12、pushd 和 popd

　　切换当前目录

　　@echo off

　　c: cd\\ & md mp3 #在 C:\\ 建立 mp3 文件夹

　　md d:\\mp4 #在 D:\\ 建立 mp4 文件夹

　　cd /d d:\\mp4#更改当前目录为 d:\\mp4

　　pushd c:\\mp3#保存当前目录，并切换当前目录为 c:\\mp3

　　popd#恢复当前目录为刚才保存的 d:\\mp4

　　一般用处不大，在当前目录名不确定时，会有点帮助。（dos编程中很有用）

　　13、CALL

　　CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理

　　CALL command

　　调用一条批处理命令，和直接执行命令效果一样，特殊情况下很有用，比如变量的多级嵌套，见教程后面。在批处理编程中，可以根据一定条件生成命令字符串，用call可以执行该字符串，见例子。

　　CALL [drive:][path]filename [batch-parameters]

　　调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。

　　CALL :label arguments

　　调用本文件内命令段，相当于子程序。被调用的命令段以标签:label开头

　　以命令goto :eof结尾。

　　另外，批脚本文本参数参照(%0、%1、等等)已如下改变:

　　批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 ...)

　　批参数(%n)的替代已被增强。您可以使用以下语法:（看不明白的直接运行后面的例子）

　　%~1 - 删除引号(\")，扩充 %1

　　%~f1- 将 %1 扩充到一个完全合格的路径名

　　%~d1- 仅将 %1 扩充到一个驱动器号

　　%~p1- 仅将 %1 扩充到一个路径

　　%~n1- 仅将 %1 扩充到一个文件名

　　%~x1- 仅将 %1 扩充到一个文件扩展名

　　%~s1- 扩充的路径指含有短名

　　%~a1- 将 %1 扩充到文件属性

　　%~t1- 将 %1 扩充到文件的日期/时间

　　%~z1- 将 %1 扩充到文件的大小

　　%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1

　　扩充到找到的第一个完全合格的名称。如果环境

　　变量名未被定义，或者没有找到文件，此组合键会

　　扩充到空字符串

　　可以组合修定符来取得多重结果:

　　%~dp1 - 只将 %1 扩展到驱动器号和路径

　　%~nx1 - 只将 %1 扩展到文件名和扩展名

　　%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，

　　并扩展到找到的第一个文件的驱动器号和路径。

　　%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。

　　在上面的例子中，%1 和 PATH 可以被其他有效数值替换。

　　%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用

　　注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展

　　要理解上面的知识，下面的例子很关键。

　　例：

　　@echo off

　　Echo 产生一个临时文件 > tmp.txt

　　Rem 下行先保存当前目录，再将c:\\windows设为当前目录

　　pushd c:\\windows

　　Call :sub tmp.txt

　　Rem 下行恢复前次的当前目录

　　Popd

　　Call :sub tmp.txt

　　pause

　　Del tmp.txt

　　exit

　　:sub

　　Echo 删除引号： %~1

　　Echo 扩充到路径： %~f1

　　Echo 扩充到一个驱动器号： %~d1

　　Echo 扩充到一个路径： %~p1 

　　Echo 扩充到一个文件名： %~n1

　　Echo 扩充到一个文件扩展名： %~x1

　　Echo 扩充的路径指含有短名： %~s1 

　　Echo 扩充到文件属性： %~a1 

　　Echo 扩充到文件的日期/时间： %~t1 

　　Echo 扩充到文件的大小： %~z1 

　　Echo 扩展到驱动器号和路径：%~dp1

　　Echo 扩展到文件名和扩展名：%~nx1

　　Echo 扩展到类似 DIR 的输出行：%~ftza1

　　Echo.

　　Goto :eof

　　例：

　　set aa=123456

　　set cmdstr=echo %aa%

　　call %cmdstr%

　　pause

　　本例中如果不用call，而直接运行%cmdstr%，将显示结果%aa%，而不是123456

　　14、shift

　　更改批处理文件中可替换参数的位置。

　　SHIFT [/n]

　　如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉

　　命令从第 n 个参数开始移位；n 介于零和八之间。例如:

　　SHIFT /2

　　会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。

　　15、IF

　　IF 条件判断语句，语法格式如下：

　　IF [NOT] ERRORLEVEL number command

　　IF [NOT] string1==string2 command

　　IF [NOT] EXIST filename command

　　下面逐一介绍，更详细的分析请看后面章节。

　　(1) IF [NOT] ERRORLEVEL number command

　　IF ERRORLEVEL这个句子必须放在某一个命令的后面，执行命令后由IF ERRORLEVEL 来判断命令的返回值。

　　Number的数字取值范围0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立

　　例：

　　@echo off

　　dir c:

　　rem退出代码为>=1就跳至标题1处执行，>=0就跳至标题0处执行

　　IF ERRORLEVEL 1 goto 1

　　IF ERRORLEVEL 0 goto 0

　　Rem 上面的两行不可交换位置，否则失败了也显示成功。

　　:0

　　echo 命令执行成功！

　　Rem 程序执行完毕跳至标题exit处退出

　　goto exit

　　:1

　　echo 命令执行失败！

　　Rem 程序执行完毕跳至标题exit处退出

　　goto exit

　　:exit

　　pause

　　运行显示：命令执行成功！

　　(2) IF [NOT] string1==string2 command

　　string1和string2都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个（绝对相等的意思）

　　条件相等后即执行后面的command

　　检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式

　　if [NOT] {string1}=={string2} command

　　if [NOT] [string1]==[string2] command

　　if [NOT] \"string1\"==\"string2\" command

　　这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：

　　if {string1}==[string2] command

　　(3) IF [NOT] EXIST filename command

　　EXIST filename为文件或目录存在的意思

　　echo off

　　IF EXIST autoexec.bat echo 文件存在！

　　IF not EXIST autoexec.bat echo 文件不存在！

　　这个批处理大家可以放在C盘和D盘分别执行，看看效果

　　16、setlocal 与 变量延迟

　　本条内容引用[英雄出品]的批处理教程：

　　要想进阶，变量延迟是必过的一关！所以这一部分希望你能认真看。

　　为了更好的说明问题，我们先引入一个例子。

　　例1:

　　@echo off

　　set a=4

　　set a=5 echo %a%

　　pause

　　结果：4

　　解说：为什么是4而不是5呢？在echo之前明明已经把变量a的值改成5了？

　　让我们先了解一下批处理运行命令的机制：

　　批处理读取命令时是按行读取的（另外例如for命令等，其后用一对圆括号闭合的所有语句也当作一行），在处理之前要完成必要的预处理工作，这其中就包括对该行命令中的变量赋值。我们现在分析一下例1，批处理在运行到这句“set a=5 echo %a%”之前，先把这一句整句读取并做了预处理——对变量a赋了值，那么%a%当然就是4了！（没有为什么，批处理就是这样做的。）

　　而为了能够感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。

　　那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：

　　例2:

　　@echo off

　　setlocal enabledelayedexpansion

　　set a=4

　　set a=5 echo !a!

　　pause 

　　结果：5

　　解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是“setlocal enabledelayedexpansion”，并且变量要用一对叹号“!!”括起来（注意要用英文的叹号），否则就没有变量延迟的效果。

　　分析一下例2，首先“setlocal enabledelayedexpansion”开启变量延迟，然后“set a=4”先给变量a赋值为

　　4，“set a=5 echo !a!”这句是给变量a赋值为5并输出（由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时a的值就是5了）。

　　再举一个例子巩固一下。

　　例3:

　　@echo off

　　setlocal enabledelayedexpansion

　　for /l %%i in (1,1,5) do (

　　set a=%%i

　　echo !a!

　　)

　　pause

　　结果：

　　1

　　2

　　3

　　4

　　5

　　解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什

　　么结果呢？结果是这样的：

　　ECHO 处于关闭状态。

　　ECHO 处于关闭状态。

　　ECHO 处于关闭状态。

　　ECHO 处于关闭状态。

　　ECHO 处于关闭状态。

　　即没有感知到for语句中的动态变化。

　　提示：在没有开启变量延迟的情况下，某条命令行中的变量改变，必须到下一条命令才能体现。这一点也可以加以利用，看例子。

　　例：交换两个变量的值，且不用中间变量

　　@echo off

　　::目的：交换两个变量的值，但是不使用临时变量

　　::Code by JM 2007-1-24 [url=mailto:CMD@XP]CMD@XP[/url]

　　::出处：http://www.cn-dos.net/forum/viewthread.php?tid=27078

　　set var1=abc

　　set var2=123

　　echo 交换前： var1=%var1% var2=%var2%

　　set var1=%var2% set var2=%var1%

　　echo 交换后： var1=%var1% var2=%var2%

　　pause

　　17、ATTRIB显示或更改文件属性

　　ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [path] filename] [/S [/D]]

　　+ 设置属性。

　　-清除属性。

　　R 只读文件属性。

　　A 存档文件属性。

　　S 系统文件属性。

　　H 隐藏文件属性。

　　[drive:][path][filename]

　　指定要处理的文件属性。

　　/S处理当前文件夹及其子文件夹中的匹配文件。

　　/D也处理文件夹。

　　例：

　　md autorun

　　attrib +a +s +h autorun

　　上面的命令将建立文件夹autorun，然后将其设为存档、系统、隐藏属性

　　第二节 常用特殊符号

　　1、@命令行回显屏蔽符

　　2、%批处理变量引导符

　　3、> 重定向符

　　4、>>重定向符

　　5、<、>、<& 重定向符

　　6、|命令管道符

　　7、^转义字符

　　8、组合命令

　　9、& 组合命令

　　10、||组合命令

　　11、\"\"字符串界定符

　　12、, 逗号

　　13、; 分号

　　14、() 括号

　　15、! 感叹号

　　16、批处理中可能会见到的其它特殊标记符: （略）

　　CR(0D) 命令行结束符 

　　Escape(1B) ANSI转义字符引导符 

　　Space(20) 常用的参数界定符 

　　Tab(09) ; = 不常用的参数界定符 

　　+ COPY命令文件连接符 

　　* ? 文件通配符 

　　/ 参数开关引导符 

　　: 批处理标签引导符

　　废话少说，开讲了

　　1、@命令行回显屏蔽符

　　这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道

　　ECHO OFF可以关闭掉整个批处理命令的回显，但不能关掉ECHO OFF这个命令，现在我们在ECHO OFF这个命令前加个@，就可以达到所有命令均不回显的要求

　　2、%批处理变量引导符

　　这个百分号严格来说是算不上命令的，它只是批处理中的参数而已（多个%一起使用的情况除外，以后还将详细介绍）。

　　引用变量用%var%，调用程序外部参数用%1至%9等等

　　%0%1%2%3%4%5%6%7%8%9%*为命令行传递给批处理的参数

　　%0 批处理文件本身，包括完整的路径和扩展名

　　%1 第一个参数

　　%9 第九个参数

　　%* 从第一个参数开始的所有参数

　　参数%0具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制文件自身等等。

　　例：最简单的复制文件自身的方法

　　copy %0 d:\\wind.bat

　　小技巧：添加行内注释

　　%注释内容%（可以用作行内注释，不能出现重定向符号和管道符号）

　　为什么这样呢？此时“注释内容”其实被当作变量，其值是空的，故只起注释作用，不过这种用法容易出现语法错误，一般不用。

　　3、> 重定向符

　　输出重定向命令

　　这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围（后边可以是文件，也可以是默认的系统控制台）

　　在NT系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符,&&,||和语句块的制约限制。

　　比如：

　　使用命令：echo hello >1.txt将建立文件1.txt，内容为”hello “（注意行尾有一空格）

　　使用命令：echo hello>1.txt将建立文件1.txt，内容为”hello“（注意行尾没有空格）

　　4、>>重定向符

　　输出重定向命令

　　这个符号的作用和>有点类似，但他们的区别是>>是传递并在文件的末尾追加，而>是覆盖

　　用法同上

　　同样拿1.txt做例子

　　使用命令：

　　echo hello > 1.txt

　　echo world >>1.txt

　　这时候1.txt 内容如下:

　　hello

　　world

　　5、<、>、<& 重定向符

　　这三个命令也是管道命令，但它们一般不常用，你只需要知道一下就ok了，当然如果想仔细研究的话，可以自己查一下资料。(本人已查过，网上也查不到相关资料)

　　<，输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。

　　@echo off

　　echo 2005-05-01>temp.txt

　　date <TEMP.TXTdel temp.txt

　　这样就可以不等待输入直接修改当前日期

　　>，将一个句柄的输出写入到另一个句柄的输入中。

　　<，刚好和>&相反，从一个句柄读取输入并将其写入到另一个句柄输出中。

　　常用句柄：0、1、2，未定义句柄：3—9

　　1>nul 表示禁止输出正确的信息

　　2>nul 表示禁止输出错误信息。

　　其中的1与2都是代表某个数据流输入输出的地址（NT CMD 称之为句柄，MSDOS称之为设备）。

　　句柄0：标准输入stdin，键盘输入

　　句柄1：标准输出stdout，输出到命令提示符窗口（console，代码为CON）

　　句柄2：标准错误stderr，输出到命令提示符窗口（console，代码为CON）

　　其中的stdin可被<重定向，stdout可被>、>>重定向。

　　我们已经知道读取文本中的内容可以用for命令，但如果只需要读取第一行用for命令就有点麻烦。简单的办法如下:

　　@echo off

　　set /p str=<%0

　　echo %str%

　　pause

　　运行显示批处理文件自身的第一行：@echo off

　　6、|命令管道符

　　格式：第一条命令 | 第二条命令 [| 第三条命令...]

　　将第一条命令的结果作为第二条命令的参数来使用，记得在unix中这种方式很常见。

　　例如：

　　dir c:\\|find \"txt\"

　　以上命令是：查找C：\\所有，并发现TXT字符串。

　　FIND的功能请用 FIND /? 自行查看

　　在不使format的自动格式化参数时，我是这样来自动格式化A盘的

　　echo y|format a: /s /q /v:system

　　用过format的都知道，再格盘时要输入y来确认是否格盘，这个命令前加上echo y并用|字符来将echo y的结果传给format命令

　　从而达到自动输入y的目的

　　（这条命令有危害性，测试时请慎重）

　　7、^转义字符

　　^是对特殊符号<,>,的前导字符，在命令中他将以上3个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。

　　比如

　　echo test ^>1.txt

　　结果则是：test > 1.txt

　　他没有追加在1.txt里，呵呵。只是显示了出来

　　另外，此转义字符还可以用作续行符号。

　　举个简单的例子：

　　@echo off

　　echo 英雄^

　　是^

　　好^

　　男人

　　pause

　　不用多说，自己试一下就明白了。

　　为什么转义字符放在行尾可以起到续行符的作用呢？原因很简单，因为每行末尾还有一个看不见的符号，即回车符，转义字符位于行尾时就让回车符失效了，从而起到了续行的作用。

　　8、组合命令

　　语法：第一条命令 第二条命令 [& 第三条命令...]

　　、&&、||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批处理认行不认命令数目。

　　这个符号允许在一行中使用2个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。

　　这里两边的命令是顺序执行的，从前往后执行。

　　比如：

　　dir z:\\ dir y:\\ & dir c:\\

　　以上命令会连续显示z,y,c盘的内容，不理会该盘是否存在

　　9、& 组合命令

　　语法：第一条命令 & 第二条命令 [&& 第三条命令...]

　　用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令

　　这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行

　　dir z:\\ & dir y:\\ && dir c:\\

　　10、||组合命令

　　语法：第一条命令 || 第二条命令 [|| 第三条命令...]

　　用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；

　　提示：组合命令和重定向命令一起使用必须注意优先级

　　管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令

　　问题：把C盘和D盘的文件和文件夹列出到a.txt文件中。看例：

　　dir c:\\ & dir d:\\ > a.txt

　　这样执行后a.txt里只有D盘的信息！为什么？因为组合命令的优先级没有重定向命令的优先级高！所以这句在执行时将本行分成这两部分：dir c:\\和dir d:\\ > a.txt，而并不是如你想的这两部分：dir c:\\ & dir d:\\和> a.txt。要使用组合命令&&达到题目的要求，必须得这么写：

　　dir c:\\ > a.txt & dir d:\\ >> a.txt

　　这样，依据优先级高低，DOS将把这句话分成以下两部分：dir c:\\ > a.txt和dir d:\\ >> a.txt。例十八中的几句的差别比较特殊，值得好好研究体会一下。

　　当然这里还可以利用命令（自己想一下道理哦）：

　　dir c:\\ > a.txt dir d:\\ >> a.txt

　　11、\"\"字符串界定符

　　双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法

　　cd \"program files\"

　　cd progra~1

　　cd pro*

　　以上三种方法都可以进入program files这个目录

　　12、, 逗号

　　逗号相当于空格，在某些情况下“,”可以用来当做空格使

　　比如

　　dir,c:\\

　　13、; 分号

　　分号，当命令相同时，可以将不同目标用；来隔离，但执行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。（有人说不会继续执行，其实测试一下就知道了）

　　比如：

　　dir c:\\;d:\\;e:\\;z:\\

　　以上命令相当于

　　dir c:\\

　　dir d:\\

　　dir e:\\

　　dir f:\\

　　如果其中z盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。

　　例：dir c:\\;d:\\;e:\\1.txt

　　以上命令相当于

　　dir c:\\

　　dir d:\\

　　dir e:\\1.txt

　　其中文件e:\\1.txt不存在，但e盘存在，有错误提示，但命令仍会执行。

　　为什么？如果目标路径不存在，则终止执行；如果路径存在，仅文件不存在，则继续执行。

　　14、() 括号

　　小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。

　　括号在for语句和if语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。

　　例：

　　命令：echo 1 echo 2 & echo 3

　　可以写成：

　　(

　　echo 1

　　echo 2

　　echo 3

　　)

　　上面两种写法效果一样，这两种写法都被视为是一条命令行。

　　注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。

　　15、! 感叹号

　　没啥说的，在变量延迟问题中，用来表示变量，即%var%应该表示为!var!，请看前面的setlocal命令介绍。

　　第二章 DOS循环：for命令详解

　　讲FOR之前呢,咋先告诉各位新手朋友,如果你有什么命令不懂,直接在CMD下面输入:

　　name /? 这样的格式来看系统给出的帮助文件,比如for /? 就会把FOR命令的帮助全部显示出来!当然许多菜鸟都看不懂....所以才会有那么多批处理文章!!!!俺也照顾菜鸟,把FOR命令用我自己的方式说明下!

　　正式开始:

　　一、基本格式

　　FOR %%variable IN (set) DO command [command-parameters]

　　%%variable指定一个单一字母表示可替换的参数。

　　(set)指定一个或一组文件。可以使用通配符。

　　command指定对每个文件执行的命令。

　　command-parameters

　　为特定命令指定参数或命令行开关。

　　参数:FOR有4个参数 /d /l /r /f 他们的作用我在下面用例子解释

　　现在开始讲每个参数的意思

　　二、参数 /d

　　FOR /D %%variable IN (set) DO command [command-parameters]

　　如果集中包含通配符，则指定与目录名匹配，而不与文件

　　名匹配。

　　如果 Set (也就是我上面写的 \"相关文件或命令\") 包含通配符（* 和 ?），将对与 Set 相匹配的每个目录（而不是指定目录中的文件组）执行指定的 Command。

　　这个参数主要用于目录搜索,不会搜索文件,看这样的例子

　　@echo off

　　for /d %%i in (c:\\*) do echo %%i

　　pause

　　运行会把C盘根目录下的全部目录名字打印出来,而文件名字一个也不显示!

　　在来一个,比如我们要把当前路径下文件夹的名字只有1-3个字母的打出来

　　@echo off

　　for /d %%i in (???) do echo %%i

　　pause

　　这样的话如果你当前目录下有目录名字只有1-3个字母的,就会显示出来,没有就不显示了

　　这里解释下*号和?号的作用,*号表示任意N个字符,而?号只表示任意一个字符

　　知道作用了,给大家个思考题目!

　　@echo off

　　for /d %%i in (window?) do echo %%i

　　pause

　　保存到C盘下执行,会显示什么呢?自己看吧! 显示：windows

　　/D参数只能显示当前目录下的目录名字,这个大家要注意!

　　三、参数 /R

　　FOR /R [[drive:]path] %%variable IN (set) DO command [command-parameters]

　　检查以 [drive:]path 为根的目录树，指向每个目录中的

　　FOR 语句。如果在 /R 后没有指定目录，则使用当前

　　目录。如果集仅为一个单点(.)字符，则枚举该目录树。

　　递归

　　上面我们知道,/D只能显示当前路径下的目录名字,那么现在这个/R也是和目录有关,他能干嘛呢?放心他比/D强大多了!

　　他可以把当前或者你指定路径下的文件名字全部读取,注意是文件名字,有什么用看例子!

　　请注意2点：

　　1、set中的文件名如果含有通配符(？或*)，则列举/R参数指定的目录及其下面的所用子目录中与set相符合的所有文件，无相符文件的目录则不列举。

　　2、相反，如果set中为具体文件名，不含通配符，则枚举该目录树（即列举该目录及其下面的所有子目录），而不set中的指定文件是否存在。这与前面所说的单点（.）枚举目录树是一个道理，单点代表当前目录，也可视为一个文件。

　　例：

　　@echo off

　　for /r c:\\ %%i in (*.exe) do echo %%i

　　pause

　　咱们把这个BAT保存到D盘随便哪里然后执行,我会就会看到,他把C盘根目录,和每个目录的子目录下面全部的EXE文件都列出来了!!!!

　　例：

　　@echo off

　　for /r %%i in (*.exe) do @echo %%i

　　pause

　　参数不一样了吧!这个命令前面没加那个C:\\也就是搜索路径,这样他就会以当前目录为搜索路径,比如你这个BAT你把他放在d:\\test目录下执行,那么他就会把D:\\test目录和他下面的子目录的全部EXE文件列出来!!!

　　例：

　　@echo off

　　for /r c:\\ %%i in (boot.ini) do echo %%i

　　pause

　　运行本例发现枚举了c盘所有目录，为了只列举boot.ini存在的目录，可改成下面这样：

　　@echo off

　　for /r c:\\ %%i in (boot.ini) do if exist %%i echo %%i

　　pause
